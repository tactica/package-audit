require_relative '../const/cmd'
require_relative '../enum/vulnerability_type'

module Package
  module Audit
    module Npm
      class VulnerabilityFinder
        AUDIT_ADVISORY_REGEX = /^{"type":"auditAdvisory".*$/

        def initialize(dir, pkgs)
          @dir = dir
          @pkg_hash = pkgs.to_h { |pkg| [pkg.name, pkg] }
          @vuln_hash = {}
        end

        def run
          json_string_lines = `#{format(Const::Cmd::YARN_AUDIT_JSON, @dir)}`
          array = json_string_lines.scan(AUDIT_ADVISORY_REGEX)

          vulnerability_json_array = JSON.parse("[#{array.join(',')}]", symbolize_names: true)
          vulnerability_json_array.each do |vulnerability_json|
            update_meta_data(vulnerability_json)
          end
          @vuln_hash.values
        end

        private

        def update_meta_data(json) # rubocop:disable Metrics/AbcSize
          parent_name = json[:data][:resolution][:path].split('>').first
          advisory = json[:data][:advisory]
          name = advisory[:module_name]
          version = advisory[:findings][0][:version]
          full_name = "#{name}@#{version}"
          vulnerability = advisory[:severity] || Enum::VulnerabilityType::UNKNOWN

          @vuln_hash[full_name] = Package.new(name, version, 'node') unless @vuln_hash.key? full_name
          @vuln_hash[full_name].update vulnerabilities: @vuln_hash[full_name].vulnerabilities + [vulnerability]
          @vuln_hash[full_name].update groups: @pkg_hash[parent_name].groups.map(&:to_s)
        end
      end
    end
  end
end
