require_relative '../const'
require_relative '../enum/vulnerability_type'

module Package
  module Audit
    module Npm
      class VulnerabilityFinder
        AUDIT_ADVISORY_REGEX = /^{"type":"auditAdvisory".*$/

        def initialize(pkgs)
          @pkg_hash = {}
          pkgs.each { |pkg| @pkg_hash[pkg.name] = pkg }
          @vuln_pkg_hash = {}
        end

        def run
          json_string_lines = `#{Const::YARN_AUDIT_CMD_JSON}`
          array = json_string_lines.scan(AUDIT_ADVISORY_REGEX)

          vulnerability_json_array = JSON.parse("[#{array.join(',')}]", symbolize_names: true)
          vulnerability_json_array.each do |vulnerability_json|
            dependency = vulnerability_json[:data][:resolution][:path].split('>').first
            name, version, full_name, vulnerability = extract_data_from_json(vulnerability_json)
            @vuln_pkg_hash[full_name] = Dependency.new name, version unless @vuln_pkg_hash.key? full_name
            @vuln_pkg_hash[full_name].update vulnerabilities: @vuln_pkg_hash[full_name].vulnerabilities + [vulnerability]
            @vuln_pkg_hash[full_name].update groups: @pkg_hash[dependency].groups
          end
          @vuln_pkg_hash.values
        end

        private

        def extract_data_from_json(json)
          advisory = json[:data][:advisory]
          name = advisory[:module_name]
          version = advisory[:findings][0][:version]
          full_name = "#{name}@#{version}"
          vulnerability = advisory[:severity] || Enum::VulnerabilityType::UNKNOWN
          [name, version, full_name, vulnerability]
        end
      end
    end
  end
end
